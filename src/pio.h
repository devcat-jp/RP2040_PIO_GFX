// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// spi_tx //
// ------ //

#define spi_tx_wrap_target 0
#define spi_tx_wrap 3

static const uint16_t spi_tx_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0     
    0x6078, //  1: out    null, 24        side 0     
    0x6001, //  2: out    pins, 1         side 0     
    0x10e2, //  3: jmp    !osre, 2        side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_tx_program = {
    .instructions = spi_tx_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config spi_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_tx_wrap_target, offset + spi_tx_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}
#endif

// ------------ //
// spi_tx_16bit //
// ------------ //

#define spi_tx_16bit_wrap_target 0
#define spi_tx_16bit_wrap 3

static const uint16_t spi_tx_16bit_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0     
    0x6070, //  1: out    null, 16        side 0     
    0x6001, //  2: out    pins, 1         side 0     
    0x10e2, //  3: jmp    !osre, 2        side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program spi_tx_16bit_program = {
    .instructions = spi_tx_16bit_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config spi_tx_16bit_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + spi_tx_16bit_wrap_target, offset + spi_tx_16bit_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void spi_tx_init(PIO pio, uint sm, uint offset, uint mosi_pin, uint clk_pin, float clkdiv) {
    // ステートマシンの設定
    pio_sm_config c = spi_tx_program_get_default_config(offset);
    // MOSI設定
    pio_gpio_init(pio, mosi_pin);                                       // ピンの機能をPIOに設定
    pio_sm_set_consecutive_pindirs(pio, sm, mosi_pin, 1, true);         // ピンを出力に設定
    // SLK設定（side）
    pio_gpio_init(pio, clk_pin);                                        // ピンの機能をPIOに設定
    pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);          // ピンを出力に設定
    sm_config_set_sideset_pins(&c, clk_pin);
    // out命令とset命令の出力設定
    sm_config_set_out_pins(&c, mosi_pin, 1);
    sm_config_set_set_pins(&c, mosi_pin, 1);
    // OSRの閾値を設定
    sm_config_set_out_shift(&c, false, false, 32);                     // 左シフト、Auto Pullはfalse
    // TXにFIFOを結合
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // ボーレート設定（分周）
    sm_config_set_clkdiv(&c, clkdiv);
    // ステートマシンの設定反映と起動
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif








static inline void pio_putc(PIO pio, uint sm, char c) {
    pio_sm_put_blocking(pio, sm, (uint32_t)c);
}

static inline void pio_puts(PIO pio, uint sm, const char *s) {
    while (*s)
        pio_putc(pio, sm, *s++);
}

